"""
Story Generation Models - EduKids
AI-powered story generation with comprehension questions and gamification
"""
from django.db import models
from django.utils.translation import gettext_lazy as _
from students.models import Student
import json


class Story(models.Model):
    """
    AI-Generated stories for children
    """
    THEME_CHOICES = (
        ('teamwork', 'Teamwork'),
        ('kindness', 'Kindness'),
        ('curiosity', 'Curiosity'),
        ('honesty', 'Honesty'),
        ('sharing', 'Sharing'),
        ('problem_solving', 'Problem Solving'),
        ('friendship', 'Friendship'),
        ('courage', 'Courage'),
    )
    
    AGE_GROUP_CHOICES = (
        ('6-7', '6-7 years'),
        ('7-8', '7-8 years'),
        ('8-9', '8-9 years'),
    )
    
    title = models.CharField(max_length=200, verbose_name="Story Title")
    theme = models.CharField(
        max_length=20,
        choices=THEME_CHOICES,
        verbose_name="Theme"
    )
    age_group = models.CharField(
        max_length=10,
        choices=AGE_GROUP_CHOICES,
        default='6-7',
        verbose_name="Age Group"
    )
    story_content = models.JSONField(
        verbose_name="Story Paragraphs",
        help_text="List of story paragraphs"
    )
    characters = models.JSONField(
        default=list,
        verbose_name="Main Characters",
        help_text="List of character names"
    )
    questions = models.JSONField(
        verbose_name="Comprehension Questions",
        help_text="List of questions with answers"
    )
    difficulty_level = models.IntegerField(
        default=1,
        verbose_name="Difficulty Level (1-5)"
    )
    reading_time_minutes = models.IntegerField(
        default=5,
        verbose_name="Estimated Reading Time (minutes)"
    )
    generated_by_ai = models.BooleanField(
        default=True,
        verbose_name="Generated by AI"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Created At")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Updated At")
    
    class Meta:
        verbose_name = "Story"
        verbose_name_plural = "Stories"
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.title} ({self.get_theme_display()})"
    
    def get_story_json(self):
        """Return story in JSON format for API"""
        return {
            "title": self.title,
            "theme": self.get_theme_display(),
            "story": self.story_content,
            "questions": self.questions,
            "characters": self.characters,
            "difficulty": self.difficulty_level,
            "reading_time": self.reading_time_minutes
        }


class StoryProgress(models.Model):
    """
    Track student progress on stories
    """
    student = models.ForeignKey(
        Student,
        on_delete=models.CASCADE,
        related_name='story_progress',
        verbose_name="Student"
    )
    story = models.ForeignKey(
        Story,
        on_delete=models.CASCADE,
        related_name='student_progress',
        verbose_name="Story"
    )
    is_completed = models.BooleanField(default=False, verbose_name="Completed")
    score = models.IntegerField(
        null=True,
        blank=True,
        verbose_name="Score (0-5)"
    )
    answers = models.JSONField(
        default=dict,
        verbose_name="Student Answers",
        help_text="Dictionary of question answers"
    )
    time_spent_seconds = models.IntegerField(
        default=0,
        verbose_name="Time Spent (seconds)"
    )
    emotion_detected = models.CharField(
        max_length=50,
        blank=True,
        verbose_name="Detected Emotion",
        help_text="Emotion captured during reading (happy, focused, confused, etc.)"
    )
    feedback_given = models.TextField(
        blank=True,
        verbose_name="AI Feedback"
    )
    started_at = models.DateTimeField(auto_now_add=True, verbose_name="Started At")
    completed_at = models.DateTimeField(
        null=True,
        blank=True,
        verbose_name="Completed At"
    )
    
    class Meta:
        verbose_name = "Story Progress"
        verbose_name_plural = "Story Progress Records"
        unique_together = ['student', 'story']
        ordering = ['-started_at']
    
    def __str__(self):
        status = "‚úì" if self.is_completed else "‚è≥"
        return f"{status} {self.student} - {self.story.title}"
    
    def calculate_score(self):
        """Calculate score based on correct answers"""
        if not self.answers or not self.story.questions:
            return 0
        
        correct = 0
        total = len(self.story.questions)
        
        for i, question_data in enumerate(self.story.questions):
            student_answer = self.answers.get(f"q{i}", "").lower().strip()
            correct_answer = question_data.get('answer', '').lower().strip()
            
            # Simple matching - can be enhanced with NLP
            if student_answer and correct_answer:
                if student_answer in correct_answer or correct_answer in student_answer:
                    correct += 1
        
        return round((correct / total) * 5) if total > 0 else 0


class Badge(models.Model):
    """
    Gamification badges for story achievements
    """
    BADGE_TYPE_CHOICES = (
        ('story_explorer', 'Story Explorer'),
        ('super_reader', 'Super Reader'),
        ('perfect_score', 'Perfect Score'),
        ('speed_reader', 'Speed Reader'),
        ('theme_master', 'Theme Master'),
        ('curious_mind', 'Curious Mind'),
        ('consistent_learner', 'Consistent Learner'),
    )
    
    name = models.CharField(max_length=100, verbose_name="Badge Name")
    badge_type = models.CharField(
        max_length=30,
        choices=BADGE_TYPE_CHOICES,
        unique=True,
        verbose_name="Badge Type"
    )
    description = models.TextField(verbose_name="Description")
    icon = models.CharField(
        max_length=50,
        default="üèÜ",
        verbose_name="Icon/Emoji"
    )
    color = models.CharField(
        max_length=20,
        default="#FFB6C1",
        verbose_name="Pastel Color"
    )
    requirement = models.JSONField(
        verbose_name="Requirements",
        help_text="Criteria to earn this badge"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Created At")
    
    class Meta:
        verbose_name = "Badge"
        verbose_name_plural = "Badges"
        ordering = ['name']
    
    def __str__(self):
        return f"{self.icon} {self.name}"


class StudentBadge(models.Model):
    """
    Badges earned by students
    """
    student = models.ForeignKey(
        Student,
        on_delete=models.CASCADE,
        related_name='earned_badges',
        verbose_name="Student"
    )
    badge = models.ForeignKey(
        Badge,
        on_delete=models.CASCADE,
        related_name='earned_by',
        verbose_name="Badge"
    )
    earned_at = models.DateTimeField(auto_now_add=True, verbose_name="Earned At")
    
    class Meta:
        verbose_name = "Student Badge"
        verbose_name_plural = "Student Badges"
        unique_together = ['student', 'badge']
        ordering = ['-earned_at']
    
    def __str__(self):
        return f"{self.student} - {self.badge.name}"
