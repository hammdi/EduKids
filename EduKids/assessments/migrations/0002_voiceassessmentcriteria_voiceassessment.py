# Generated by Django 5.2.6 on 2025-10-13 11:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0001_initial'),
        ('exercises', '0001_initial'),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='VoiceAssessmentCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du critère')),
                ('category', models.CharField(choices=[('originality', 'Originalité'), ('verbal', 'Communication Verbale'), ('paraverbal', 'Communication Paraverbale')], max_length=50, verbose_name='Catégorie')),
                ('description', models.TextField(verbose_name='Description')),
                ('weight', models.FloatField(default=1.0, help_text='Poids relatif du critère (0-1)', verbose_name='Pondération')),
                ('grade_levels', models.JSONField(default=list, help_text='CP, CE1, CE2, CM1, CM2', verbose_name='Niveaux applicables')),
                ('evaluation_rubric', models.JSONField(default=dict, help_text='Critères détaillés pour chaque niveau de score', verbose_name="Grille d'évaluation")),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': "Critère d'Évaluation Vocale",
                'verbose_name_plural': "Critères d'Évaluation Vocale",
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='VoiceAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.TextField(help_text="Question posée à l'élève ou sujet de réflexion", verbose_name='Question/Sujet')),
                ('audio_file', models.FileField(upload_to='voice_assessments/%Y/%m/%d/', verbose_name='Fichier audio')),
                ('duration', models.FloatField(blank=True, null=True, verbose_name='Durée (secondes)')),
                ('status', models.CharField(choices=[('pending', 'En attente de traitement'), ('processing', "En cours d'analyse"), ('completed', 'Terminé'), ('failed', 'Échec')], default='pending', max_length=15, verbose_name='Statut')),
                ('transcription', models.TextField(blank=True, help_text="Texte converti depuis l'audio", verbose_name='Transcription du discours')),
                ('originality_score', models.FloatField(blank=True, help_text='Créativité et innovation de la réponse (0-100)', null=True, verbose_name="Score d'originalité")),
                ('verbal_structure_score', models.FloatField(blank=True, help_text='Organisation et cohérence du discours (0-100)', null=True, verbose_name='Score de structure')),
                ('verbal_fluency_score', models.FloatField(blank=True, help_text='Fluidité et naturel du discours (0-100)', null=True, verbose_name='Score de fluidité')),
                ('verbal_vocabulary_score', models.FloatField(blank=True, help_text='Richesse et diversité du vocabulaire (0-100)', null=True, verbose_name='Score de vocabulaire')),
                ('paraverbal_intonation_score', models.FloatField(blank=True, help_text="Variation d'intonation via ponctuation (0-100)", null=True, verbose_name="Score d'intonation")),
                ('paraverbal_rhythm_score', models.FloatField(blank=True, help_text='Rythme de parole et débit (0-100)', null=True, verbose_name='Score de rythme')),
                ('paraverbal_timing_score', models.FloatField(blank=True, help_text='Gestion des pauses et segments temporels (0-100)', null=True, verbose_name='Score de temporalité')),
                ('overall_score', models.FloatField(blank=True, help_text='Moyenne pondérée de tous les critères (0-100)', null=True, verbose_name='Score global')),
                ('originality_analysis', models.JSONField(default=dict, help_text='Détails: mots-clés uniques, concepts innovants, créativité', verbose_name="Analyse d'originalité")),
                ('verbal_analysis', models.JSONField(default=dict, help_text='Détails: structure phrases, hésitations, vocabulaire utilisé', verbose_name='Analyse verbale')),
                ('paraverbal_analysis', models.JSONField(default=dict, help_text='Détails: variations tonales, pauses, débit parole', verbose_name='Analyse paraverbale')),
                ('audio_metrics', models.JSONField(default=dict, help_text='Données brutes: pitch, energy, spectral features', verbose_name='Métriques audio')),
                ('ai_feedback', models.TextField(blank=True, help_text="Commentaires et recommandations générés par l'IA", verbose_name="Feedback de l'IA")),
                ('processing_time', models.FloatField(blank=True, null=True, verbose_name='Temps de traitement (secondes)')),
                ('ai_model_used', models.CharField(blank=True, help_text='Ex: OpenAI Whisper, GPT-4, etc.', max_length=100, verbose_name='Modèle IA utilisé')),
                ('error_message', models.TextField(blank=True, verbose_name="Message d'erreur")),
                ('teacher_comments', models.TextField(blank=True, verbose_name="Commentaires de l'enseignant")),
                ('teacher_validated', models.BooleanField(default=False, verbose_name="Validé par l'enseignant")),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='voice_assessments', to='exercises.exercise', verbose_name='Exercice associé')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voice_assessments', to='students.student', verbose_name='Élève')),
                ('teacher_review', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_voice_assessments', to='students.teacher', verbose_name='Enseignant évaluateur')),
            ],
            options={
                'verbose_name': 'Évaluation Vocale',
                'verbose_name_plural': 'Évaluations Vocales',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['student', '-created_at'], name='assessments_student_6deb10_idx'), models.Index(fields=['status'], name='assessments_status_410152_idx')],
            },
        ),
    ]
