# Generated by Django 5.2.6 on 2025-10-24 23:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessments', '0002_voiceassessmentcriteria_voiceassessment'),
        ('students', '0002_alter_teacher_certification_level'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Badge Name')),
                ('badge_type', models.CharField(choices=[('story_explorer', 'Story Explorer'), ('super_reader', 'Super Reader'), ('perfect_score', 'Perfect Score'), ('speed_reader', 'Speed Reader'), ('theme_master', 'Theme Master'), ('curious_mind', 'Curious Mind'), ('consistent_learner', 'Consistent Learner')], max_length=30, unique=True, verbose_name='Badge Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(default='üèÜ', max_length=50, verbose_name='Icon/Emoji')),
                ('color', models.CharField(default='#FFB6C1', max_length=20, verbose_name='Pastel Color')),
                ('requirement', models.JSONField(help_text='Criteria to earn this badge', verbose_name='Requirements')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Story Title')),
                ('theme', models.CharField(choices=[('teamwork', 'Teamwork'), ('kindness', 'Kindness'), ('curiosity', 'Curiosity'), ('honesty', 'Honesty'), ('sharing', 'Sharing'), ('problem_solving', 'Problem Solving'), ('friendship', 'Friendship'), ('courage', 'Courage')], max_length=20, verbose_name='Theme')),
                ('age_group', models.CharField(choices=[('6-7', '6-7 years'), ('7-8', '7-8 years'), ('8-9', '8-9 years')], default='6-7', max_length=10, verbose_name='Age Group')),
                ('story_content', models.JSONField(help_text='List of story paragraphs', verbose_name='Story Paragraphs')),
                ('characters', models.JSONField(default=list, help_text='List of character names', verbose_name='Main Characters')),
                ('questions', models.JSONField(help_text='List of questions with answers', verbose_name='Comprehension Questions')),
                ('difficulty_level', models.IntegerField(default=1, verbose_name='Difficulty Level (1-5)')),
                ('reading_time_minutes', models.IntegerField(default=5, verbose_name='Estimated Reading Time (minutes)')),
                ('generated_by_ai', models.BooleanField(default=True, verbose_name='Generated by AI')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Story',
                'verbose_name_plural': 'Stories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Completed')),
                ('score', models.IntegerField(blank=True, null=True, verbose_name='Score (0-5)')),
                ('answers', models.JSONField(default=dict, help_text='Dictionary of question answers', verbose_name='Student Answers')),
                ('time_spent_seconds', models.IntegerField(default=0, verbose_name='Time Spent (seconds)')),
                ('emotion_detected', models.CharField(blank=True, help_text='Emotion captured during reading (happy, focused, confused, etc.)', max_length=50, verbose_name='Detected Emotion')),
                ('feedback_given', models.TextField(blank=True, verbose_name='AI Feedback')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_progress', to='assessments.story', verbose_name='Story')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_progress', to='students.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Story Progress',
                'verbose_name_plural': 'Story Progress Records',
                'ordering': ['-started_at'],
                'unique_together': {('student', 'story')},
            },
        ),
        migrations.CreateModel(
            name='StudentBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Earned At')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='assessments.badge', verbose_name='Badge')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_badges', to='students.student', verbose_name='Student')),
            ],
            options={
                'verbose_name': 'Student Badge',
                'verbose_name_plural': 'Student Badges',
                'ordering': ['-earned_at'],
                'unique_together': {('student', 'badge')},
            },
        ),
    ]
