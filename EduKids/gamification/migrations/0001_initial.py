# Generated by Django 5.2.6 on 2025-10-13 09:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('exercises', '0001_initial'),
        ('students', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du badge')),
                ('description', models.TextField(verbose_name='Description')),
                ('badge_type', models.CharField(choices=[('achievement', 'Accomplissement'), ('mastery', 'Maîtrise'), ('streak', 'Série'), ('special', 'Spécial')], max_length=15, verbose_name='Type de badge')),
                ('rarity', models.CharField(choices=[('common', 'Commun'), ('uncommon', 'Peu commun'), ('rare', 'Rare'), ('epic', 'Épique'), ('legendary', 'Légendaire')], default='common', max_length=15, verbose_name='Rareté')),
                ('icon', models.CharField(help_text="Nom de l'icône (ex: fa-trophy)", max_length=50, verbose_name='Icône')),
                ('image', models.ImageField(blank=True, null=True, upload_to='badges/', verbose_name='Image du badge')),
                ('points_reward', models.IntegerField(default=10, verbose_name='Points récompense')),
                ('criteria', models.JSONField(default=dict, help_text='Conditions pour obtenir le badge', verbose_name="Critères d'obtention")),
                ('is_secret', models.BooleanField(default=False, help_text="Caché jusqu'à l'obtention", verbose_name='Badge secret')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['badge_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom de la récompense')),
                ('description', models.TextField(verbose_name='Description')),
                ('reward_type', models.CharField(choices=[('avatar', 'Avatar'), ('theme', 'Thème'), ('title', 'Titre'), ('accessory', 'Accessoire'), ('other', 'Autre')], max_length=15, verbose_name='Type de récompense')),
                ('image', models.ImageField(blank=True, null=True, upload_to='rewards/', verbose_name='Image')),
                ('cost_points', models.IntegerField(default=100, verbose_name='Coût en points')),
                ('unlock_criteria', models.JSONField(blank=True, default=dict, help_text='Conditions supplémentaires (niveau, badge, etc.)', verbose_name='Critères de déverrouillage')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Premium')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créée le')),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'ordering': ['reward_type', 'cost_points'],
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('challenge_type', models.CharField(choices=[('daily', 'Quotidien'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('special', 'Spécial')], max_length=10, verbose_name='Type de défi')),
                ('difficulty', models.CharField(choices=[('easy', 'Facile'), ('medium', 'Moyen'), ('hard', 'Difficile')], default='medium', max_length=10, verbose_name='Difficulté')),
                ('objective', models.JSONField(default=dict, help_text='Critères de complétion (ex: 10 exercices, 90% de réussite)', verbose_name='Objectif')),
                ('points_reward', models.IntegerField(default=50, verbose_name='Points récompense')),
                ('start_date', models.DateTimeField(verbose_name='Date de début')),
                ('end_date', models.DateTimeField(verbose_name='Date de fin')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('badge_reward', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenge_rewards', to='gamification.badge', verbose_name='Badge récompense')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='exercises.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Défi',
                'verbose_name_plural': 'Défis',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom du classement')),
                ('leaderboard_type', models.CharField(choices=[('weekly', 'Hebdomadaire'), ('monthly', 'Mensuel'), ('all_time', 'Tous temps'), ('subject', 'Par matière'), ('classroom', 'Par classe')], max_length=15, verbose_name='Type de classement')),
                ('period_start', models.DateTimeField(verbose_name='Début de période')),
                ('period_end', models.DateTimeField(verbose_name='Fin de période')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('classroom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='students.classroom', verbose_name='Classe')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboards', to='exercises.subject', verbose_name='Matière')),
            ],
            options={
                'verbose_name': 'Classement',
                'verbose_name_plural': 'Classements',
                'ordering': ['-period_start'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('badge', 'Nouveau badge'), ('reward', 'Nouvelle récompense'), ('challenge', 'Nouveau défi'), ('level_up', 'Niveau supérieur'), ('achievement', 'Accomplissement'), ('reminder', 'Rappel'), ('general', 'Général')], max_length=15, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('normal', 'Normale'), ('high', 'Haute')], default='normal', max_length=10, verbose_name='Priorité')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icône')),
                ('link_url', models.CharField(blank=True, help_text='URL de redirection', max_length=500, verbose_name='Lien')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='Envoyée le')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lue le')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.IntegerField(verbose_name='Rang')),
                ('score', models.IntegerField(verbose_name='Score')),
                ('exercises_completed', models.IntegerField(default=0, verbose_name='Exercices complétés')),
                ('average_score', models.FloatField(default=0.0, verbose_name='Score moyen (%)')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Mis à jour le')),
                ('leaderboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='gamification.leaderboard', verbose_name='Classement')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Entrée classement',
                'verbose_name_plural': 'Entrées classement',
                'ordering': ['leaderboard', 'rank'],
                'unique_together': {('leaderboard', 'student')},
            },
        ),
        migrations.CreateModel(
            name='StudentBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True, verbose_name='Gagné le')),
                ('is_displayed', models.BooleanField(default=True, verbose_name='Affiché sur le profil')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='gamification.badge', verbose_name='Badge')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Badge gagné',
                'verbose_name_plural': 'Badges gagnés',
                'ordering': ['-earned_at'],
                'unique_together': {('student', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='StudentChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Non commencé'), ('in_progress', 'En cours'), ('completed', 'Terminé'), ('failed', 'Échoué')], default='not_started', max_length=15, verbose_name='Statut')),
                ('progress', models.FloatField(default=0.0, verbose_name='Progression (%)')),
                ('progress_data', models.JSONField(default=dict, help_text="Détails de l'avancement", verbose_name='Données de progression')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Commencé le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminé le')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='gamification.challenge', verbose_name='Défi')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Participation défi',
                'verbose_name_plural': 'Participations défis',
                'ordering': ['-started_at'],
                'unique_together': {('student', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='StudentReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, verbose_name='Débloquée le')),
                ('is_equipped', models.BooleanField(default=False, help_text="Actuellement utilisée par l'élève", verbose_name='Équipée')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlocked_by', to='gamification.reward', verbose_name='Récompense')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='students.student', verbose_name='Élève')),
            ],
            options={
                'verbose_name': 'Récompense débloquée',
                'verbose_name_plural': 'Récompenses débloquées',
                'ordering': ['-unlocked_at'],
                'unique_together': {('student', 'reward')},
            },
        ),
    ]
